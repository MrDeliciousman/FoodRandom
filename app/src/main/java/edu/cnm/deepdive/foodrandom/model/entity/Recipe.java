/*
 *  Copyright 2019 Lance Zotigh & Deep Dive Coding
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package edu.cnm.deepdive.foodrandom.model.entity;

import android.arch.persistence.room.ColumnInfo;
import android.arch.persistence.room.Entity;
import android.arch.persistence.room.PrimaryKey;
import android.support.annotation.NonNull;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

/**
 * Encapsulates attributes of a single Recipe. Room and GSon
 * annotations are used to specify entity &amp; attribute mapping for database persistence, and
 * property mapping for JSON serialization/deserialization mapping.
 */
@Entity
public class Recipe {

  @ColumnInfo(name = "recipe_id")
  @PrimaryKey(autoGenerate = true)
  private long id;

  @Expose
  private String[] ingredients;

  @Expose
  @ColumnInfo(name = "recipe_name")
  private String recipeName;

  @Expose
  private String[] smallImageUrls;

  @Expose
  @SerializedName("id")
  private String recipeKey;

  /**
   * Returns the autogenerated primary key of this instance.
   *
   * @return primary key value.
   */
  public long getId() {
    return id;
  }

  /**
   * Sets the primary key of this instance. This method is invoked by Room to set the autogenerated
   * value of a new instance, and when loading an existing instance from the database.
   *
   * @param id primary key value.
   */
  public void setId(long id) {
    this.id = id;
  }

  /**
   *Returns Ingredients for this instance.
   *
   * @return ingredients for a Recipe
   */
  @NonNull
  public String[] getIngredients() {
    return ingredients;
  }

  /**
   *Sets the ingredients of this instance. This method is invoked by Room and GSon after loading
   *from the database and JSON deserialization, respectively.
   *
   * @param ingredients ingredients for a Recipe
   */
  public void setIngredients(@NonNull String[] ingredients) {
    this.ingredients = ingredients;
  }

  /**
   *Returns the Recipe name for this instance.
   *
   * @return Name for a Recipe.
   */
  public String getRecipeName() {
    return recipeName;
  }

  /**
   *Sets the recipe name of this instance. This method is invoked by Room and GSon after loading
   *from the database and JSON deserialization, respectively.
   *
   * @param recipeName Name for a Recipe.
   */
  public void setRecipeName(String recipeName) {
    this.recipeName = recipeName;
  }

  /**
   *Returns the URL of the small-image media content (if available) of this instance.
   *
   * @return Recipe small-image content URL.
   */
  public String[] getSmallImageUrls() {
    return smallImageUrls;
  }

  /**
   *Sets the small image for this instance. This method is invoked by Room and GSon after loading
   *from the database and JSON deserialization, respectively.
   *
   * @param smallImageUrls Recipe small-image content URL.
   */
  public void setSmallImageUrls(String[] smallImageUrls) {
    this.smallImageUrls = smallImageUrls;
  }

  /**
   *Returns a Key used to reference a Recipe.
   *
   * @return Recipe key
   */
  public String getRecipeKey() {
    return recipeKey;
  }

  /**
   *Sets the Key used to reference a Recipe. This method is invoked by Room and GSon after loading
   *from the database and JSON deserialization, respectively.
   *
   * @param recipeKey Recipe key
   */
  public void setRecipeKey(String recipeKey) {
    this.recipeKey = recipeKey;
  }

  @Override
  public String toString() {
    return recipeName;
  }

}
